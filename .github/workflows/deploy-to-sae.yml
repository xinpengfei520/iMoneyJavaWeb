name: Docker Image CI

on:
  push:
    tags:
      - 'v*'  # 匹配以 "v" 开头的 Tag，例如 v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest
    name: 构建镜像 #任务名称
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Build the Docker image
        run: |
          docker version
          # 登录阿里云镜像仓库
          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} registry.cn-shanghai.aliyuncs.com
          #cd xxl-job-admin
          # 使用Dockerfile构建镜像
          docker build . --file Dockerfile --tag ${{ secrets.DOCKER_REPOSITORY }}:${{ github.run_id }}
          # 推送镜像到镜像仓库
          docker push ${{ secrets.DOCKER_REPOSITORY }}:${{ github.run_id }}

  deploy:
    needs: [ build ] # 依赖于 build 任务完成
    name: 部署容器 # 任务名称
    runs-on: ubuntu-latest # 在 Ubuntu 最新版上运行
    steps:
      # 安装阿里云 CLI
      - name: Install Alibaba Cloud CLI
        run: |
          # 下载并安装 aliyun-cli
          curl -O https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz
          tar xzvf aliyun-cli-linux-latest-amd64.tgz
          sudo mv aliyun /usr/local/bin/

      # 配置阿里云 CLI
      - name: Configure Alibaba Cloud CLI
        run: |
          aliyun configure set --profile default \
            --access-key-id ${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_ID }} \
            --access-key-secret ${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_SECRET }} \
            --region cn-shanghai  # 根据你的 SAE 区域修改

      # 使用阿里云 RESTFUL API 更新 SAE 应用
      - name: Deploy to SAE using RESTful API
        run: |
          # 通过 aliyun CLI 调用阿里云的 deployApplication API
          # 参数说明，Replicas 为实例数量，不设置默认为 1，如果需要启动多个可以增加，ImageUrl 为镜像地址
          JSON=$(aliyun sae POST /pop/v1/sam/app/deployApplication --AppId '${{ secrets.SAE_APP_ID }}' --ImageUrl '${{ secrets.DOCKER_REPOSITORY_VPC }}:${{ github.run_id }}' --Replicas 1 --header "Content-Type=application/json;" --body "{\"SidecarContainersConfig\":[{\"Envs\":\"[{\"name\":\"ALIBABA_CLOUD_ACCESS_KEY_ID\",\"value\":\"${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_ID }}\"},{\"name\":\"ALIBABA_CLOUD_ACCESS_KEY_SECRET\",\"value\":\"${{ secrets.ALIBABA_CLOUD_ACCESS_KEY_SECRET }}\"},{\"name\":\"QINIU_CLOUD_ACCESS_KEY\",\"value\":\"${{ secrets.QINIU_CLOUD_ACCESS_KEY }}\"},{\"name\":\"QINIU_CLOUD_SECRET_KEY\",\"value\":\"${{ secrets.QINIU_CLOUD_SECRET_KEY }}\"}]\"}]}")

          # 提取 Success、Message
          success=$(echo $JSON | jq -r '.Success')
          message=$(echo $JSON | jq -r '.Message')

          # 判断 Success 的值并输出结果
          if [ "$success" = "true" ]; then
            echo "部署成功"
          else
            echo "部署失败: $message"
          fi